#!/usr/bin/env bash
set -e

CURRENT_DIR=$(pwd)

if [[ ! $INPUT_DIR ]] || [[ ! $OUTPUT_DIR ]]; then
  echo "Input/Output directory variables must be set.\n"
  exit 1
fi

mkdir -p $INPUT_DIR

if [[ ! -d $INPUT_DIR ]]; then
  echo "Input directory must exist.\n"
  exit 1
fi

NVM_DIR=$HOME/.nvm
source /opt/nvm/nvm.sh

# recursively search input directory for a package.json
PACKAGE_PATH=$(find $INPUT_DIR -name package.json ! -path "*/node_modules/*"  ! -path ".git/*"  | \
  awk -F'/' '{print $0 "," NF-1}' | \
  sort -t, -nk2 | awk -F',' '{print $1}' | \
  head -n 1)

if [[ $PACKAGE_PATH ]]; then
  printf "Package found: ${PACKAGE_PATH/$INPUT_DIR/}\n"
  export PACKAGE_PATH

  # support deriving versions from app.json or package.json
  if [ -f ${INPUT_DIR}/app.json ] && [[ $MODULUS_CONFIG_ENGINES_NODE || $MODULUS_CONFIG_ENGINES_IOJS ]]; then
    SOURCE_PATH=${INPUT_DIR}/app.json
  else
    SOURCE_PATH=$PACKAGE_PATH
  fi

  NODE_VERSION=$(get-version --engine node $SOURCE_PATH 2>/dev/null) || true
  if [[ ! $NODE_VERSION ]]; then
    printf "Unable to determine Node version. Verify package.json has no errors.\n"
    exit 1
  fi

  NPM_VERSION=$(get-version --engine npm $SOURCE_PATH 2>/dev/null) || true
  if [[ ! $NPM_VERSION ]]; then
    echo "Unable to determine npm version.\n"
    exit 1
  fi

  printf "Installing node $NODE_VERSION\n"
  nvm install $NODE_VERSION > /dev/null 2>&1

  printf "Installing npm $NPM_VERSION\n"
  npm install npm@$NPM_VERSION --global > /dev/null 2>&1

  if [[ $NPM_USER ]] && [[ $NPM_PASSWORD ]] && [[ $NPM_EMAIL ]]; then
    npm-login
  fi

  npm-install

  if [[ $RUN_TESTS == "true" ]]; then
    printf "Running tests.\n"
    cd ${PACKAGE_PATH%/*}
    npm test
  fi
fi

cd $CURRENT_DIR
# Move all the files in Input Dir to Outpup Dir.  Include dot files
if [ -d $OUTPUT_DIR ]; then
  rm -rf $OUTPUT_DIR
fi
mv $INPUT_DIR $OUTPUT_DIR

MOD_DIR=$OUTPUT_DIR/.modulus
mkdir -p $MOD_DIR

# bundle nvm with output
nvm alias deploy $(nvm current)
cp -R $NVM_DIR/. $MOD_DIR/nvm
